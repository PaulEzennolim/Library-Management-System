/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Paule
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.sql.ResultSet;

public class LoginPage extends javax.swing.JFrame {
    /**
     * Creates new form LoginPage
     */
    public LoginPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        user = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("LOGIN");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("PASSWORD");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("USERNAME");

        user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userActionPerformed(evt);
            }
        });

        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("LOGIN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(user)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userActionPerformed

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordActionPerformed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        /*
        * The JDBC URL contains the address and connection parameters for the MySQL database.
        * - "jdbc:mysql://": The protocol for the MySQL JDBC driver.
        * - "localhost": The hostname where the MySQL server is running. "localhost" indicates it is running on the 
        same machine as this application.
        * - "3306": The port number on which the MySQL server is listening.
        * - "/library": The name of the database to connect to.
        * - "?useSSL=false": A query parameter that disables SSL for the connection. This is often used in development 
        environments.
        */
        String url = "jdbc:mysql://localhost:3306/library?useSSL=false";
        // The username for connecting to the MySQL database. "root" is the default administrative user
        String mysqluser = "root";
        // The password for the MySQL user account used to establish the database connection
        String mysqlpwd = "";
        /*
        * Retrieve the password input provided by the user from the JPasswordField component.
        * The getPassword() method returns the password as a character array for security reasons.
        * We then convert this character array to a String for easier comparison and processing.
        */
        String pswrd=new String(password.getPassword());
        String username = user.getText(); // Stores the username input
        /*
        * This SQL query is used to verify the user's credentials by checking the database for a matching username and 
        password.
        * The query selects the PASSWORD field from the admin table where the USER_ID matches the username provided by 
        the user.
        * If the password retrieved from the database matches the password entered by the user, the user is authorized 
        to log in.
        * Otherwise, an error message will be displayed indicating that the username or password is incorrect.
        */
        String query = ("select PASSWORD from admin where USER_ID = '" + username + "';");
        
        // If any runtime exceptions occur (e.g., SQL exceptions), they will be caught and handled in the catch block
        try{ 
            /*
            * The DriverManager.getConnection method establishes a connection to the MySQL database using the provided 
            URL, username, and password.
            * - url: The JDBC URL that specifies the location and database name.
            * - mysqluser: The username for authenticating the connection.
            * - mysqlpwd: The password associated with the specified username.
            */
            Connection conn = DriverManager.getConnection(url, mysqluser, mysqlpwd);
            // Creates a Statement object for sending SQL statements to the database
            Statement stm = conn.createStatement();
            // Execute the SQL query and return the result set
            ResultSet rs = stm.executeQuery(query);
      
            /**
            * Checks if the ResultSet contains any rows.
            *
            * The rs.next() method advances the cursor to the next row in the ResultSet. If there is a row present, it 
            returns true and the subsequent block of code will be executed. 
            * If there are no more rows,  rs.next() returns false, and the code inside the block will be skipped. 
            * 
            * For example, if we're querying for a USER_ID based on a username that does not exist in the table, 
            rs.next() will return false, and the code block that depends on the presence of a row will not execute. 
            * Instead, the program will proceed to the else part of the conditional statement.
            */
            if (rs.next()) {
                /**
                * Retrieves the value of the "PASSWORD" column from the current row of the ResultSet.
                * 
                * The ResultSet `rs` contains data retrieved from a query executed against the "admin" table.
                * The `getString("PASSWORD")` method fetches the value from the "PASSWORD" column of the current row.
                * This value is then stored in the variable `realpswrd` for further processing.
                */
                String realpswrd = rs.getString("PASSWORD");
                
                /**
                * Compares the retrieved password (realpswrd) with the user-inputted password (pswrd).
                * 
                * The `realpswrd` variable holds the password retrieved from the database for the current user.
                * The `pswrd` variable contains the password input provided by the user during login.
                * 
                * The `equals` method checks if these two password strings are identical. If they match, the user is 
                authenticated, and the application can proceed to the dashboard.
                */
                if(realpswrd.equals(pswrd)) {
                    Dashboard dsh = new Dashboard(); // Creates an instance of the `Dashboard` class
                    dsh.setVisible(true);
                    this.dispose(); // Closes and disposes of the current login window.
                }
                /**
                * Displays an error message if the entered username or password is incorrect.
                * 
                * If the username or password provided by the user does not match the credentials stored in the database,
                the `JOptionPane.showMessageDialog` method is used to show a pop-up dialog with an error message. 
                * This message informs the user that the login attempt has failed due to incorrect credentials.
                * 
                * The `this` parameter refers to the current class instance, which is used to centre the dialog relative 
                to the main window of the application.
                */
                else {
                    JOptionPane.showMessageDialog(this, "username or password entered is wrong");
                }
            }
            /**
            * Displays an error message if the username is not found in the database.
            * 
            * If the username provided by the user does not match any record in the database, this `else` block is 
            executed. 
            * The `JOptionPane.showMessageDialog` method is used to show a pop-up dialog with the message 
            "Wrong username". 
            * This informs the user that the entered username does not exist in the system.
            */
            else 
                JOptionPane.showMessageDialog(this, "Wrong username");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage()); //  Displays an error message if an exception occurs
        }
    }//GEN-LAST:event_loginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables
}
